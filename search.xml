<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[22，阿里云centos 7 发送邮件]]></title>
    <url>%2F2019%2F07%2F24%2F22%EF%BC%8C%E9%98%BF%E9%87%8C%E4%BA%91centos%207%20%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[centos 7 发送邮件 由于阿里云服务器无法开放25端口，所以只能使用证书 创建证书123456789mkdir -p /server/.certs/ ####创建目录，用来存放证书echo -n | openssl s_client -connect smtp.126.com:465 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; /server/.certs/126.crt ####向126请求证书certutil -A -n "GeoTrust SSL CA" -t "C,," -d /server/.certs -i /server/.certs/126.crt ####添加一个SSL证书到证书数据库中certutil -A -n "GeoTrust Global CA" -t "C,," -d /server/.certs -i /server/.certs/126.crt ####添加一个Global 证书到证书数据库中certutil -L -d /server/.certs ####列出目录下证书cd /server/.certs/certutil -A -n "GeoTrust SSL CA - G3" -t "Pu,Pu,Pu" -d ./ -i 126.crt /etc/mail.rc配置文件，在文件最后加上下面的内容12345set from=jonah222@126.com smtp=smtps://smtp.126.com:465set smtp-auth-user=jonah222@126.com smtp-auth-password=as20200107wset smtp-auth=loginset ssl-verify=ignoreset nss-config-dir=/server/.certs 发送邮件1234567#方法一：echo "hello" | mail -s "合同" z@totar.cn#方法二：mail -s "$(echo -e " backup result\nContent-type:text/html;charset=utf8")" z@totar.cn &lt; result.logecho '&lt;div style="color:red;"&gt;result ok&lt;/div&gt;' |mail -s "$(echo -e " backup result\nContent-type:text/html;charset=utf8")" z@totar.cn]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>邮件</tag>
        <tag>mailx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[21，定时任务的简单说明]]></title>
    <url>%2F2019%2F07%2F23%2F21%EF%BC%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[定时任务查询软件是否安装12rpm -qa | grep cron #常用rpm -qa cronie 查询这个软件包里面有什么内容1rpm -ql cronie 找出ifconfig 属于哪个软件包？12[root@oldboyedu-01 ~]# rpm -qf $(which ifconfig)net-tools-1.60-114.el6.x86_64 日志切割 轮询1234567891011[root@oldboyedu-01 ~]# ll -d /var/log/messages* /var/log/secure*-rw------- 1 root root 110279 Jul 10 14:51 /var/log/messages-rw-------. 1 root root 425211 Jun 7 12:01 /var/log/messages-20180607-rw------- 1 root root 320633 Jun 10 11:35 /var/log/messages-20180610-rw------- 1 root root 6975 Jul 7 10:08 /var/log/messages-20180707-rw------- 1 root root 393 Jul 8 00:24 /var/log/messages-20180708-rw------- 1 root root 3186 Jul 10 21:20 /var/log/secure-rw-------. 1 root root 4347 Jun 7 11:37 /var/log/secure-20180607-rw------- 1 root root 3711 Jun 10 10:44 /var/log/secure-20180610-rw------- 1 root root 5869 Jul 7 09:33 /var/log/secure-20180707-rw------- 1 root root 6309 Jul 8 10:18 /var/log/secure-20180708 定时任务+logrotate123/etc/cron.daily/logrotate/etc/logrotate.d/syslog这两个文件共同决定，进行日志切割，轮询]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cron</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20，sersync安装配置]]></title>
    <url>%2F2019%2F07%2F22%2F20%EF%BC%8Csersync%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[sersync安装配置1， 安装配置rsync1见rsync部分 2， 安装inotify123456789101112131415161718192021222324252627282930#配置yum源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bakwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centsos-6.repomv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.bakmv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.bakwget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo#安装inotifyyum install inotify-tools –y#/server/scrpts/inotify.sh脚本内容#!/bin/bash#desc:inotify实时同步#author:zPath=/dataIp=172.16.1.41/usr/bin/inotifywait -mrq --format '%w%f' -e close_write,delete $Path \|while read file do if [ -f $file ];then rsync -az $file --delete rsync_backup@$Ip::nfsbackup --password-file=/etc/rsync.password else cd $Path &amp;&amp;\ rsync -az ./ --delete rsync_backup@$Ip::nfsbackup --password-file=/etc/rsync.password fidone 3， 安装sersync1234567891011#把准备好的sersync安装包上传到服务器上cd /server/toolsrz[root@nfs01 /server/tools ]# lssersync sersync_bak sersync.zip#解压即可unzip sersync.zip #添加 可执行权限chmod +x /application/sersync/sersync2#创建软连接ln -s /application/sersync/sersync2 /usr/bin/sersync 4， 修改配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374vim sersync/conf/confxml.xml&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;head version="2.5"&gt; &lt;host hostip="localhost" port="8008"&gt;&lt;/host&gt; &lt;debug start="false"/&gt; &lt;fileSystem xfs="false"/&gt; &lt;filter start="false"&gt; &lt;exclude expression="(.*)\.svn"&gt;&lt;/exclude&gt; &lt;exclude expression="(.*)\.gz"&gt;&lt;/exclude&gt; &lt;exclude expression="^info/*"&gt;&lt;/exclude&gt; &lt;exclude expression="^static/*"&gt;&lt;/exclude&gt; &lt;/filter&gt; &lt;inotify&gt; &lt;delete start="true"/&gt; &lt;createFolder start="true"/&gt; &lt;createFile start="false"/&gt; &lt;closeWrite start="true"/&gt; &lt;moveFrom start="true"/&gt; &lt;moveTo start="true"/&gt; &lt;attrib start="false"/&gt; &lt;modify start="false"/&gt; &lt;/inotify&gt; &lt;sersync&gt;&lt;localpath watch="/data"&gt;&lt;!--/data:nfs服务器共享的目录，即要被推送的目录--&gt; &lt;remote ip="172.16.1.41" name="nfsbackup"/&gt;&lt;!—ip:备份服务器IP，name:rsync的模块名--&gt; &lt;!--&lt;remote ip="192.168.8.39" name="tongbu"/&gt;--&gt; &lt;!--&lt;remote ip="192.168.8.40" name="tongbu"/&gt;--&gt; &lt;/localpath&gt; &lt;rsync&gt; &lt;commonParams params="-az --delete"/&gt; &lt;!--rsync的参数--&gt; &lt;auth start="true" users="rsync_backup" passwordfile="/etc/rsync.password"/&gt;&lt;!-- start=true：表示开启这个推送，users:rsync配置文件中的用户，passwordfile:rsync的密码文件--&gt; &lt;userDefinedPort start="false" port="874"/&gt; &lt;!-- port=874 --&gt; &lt;timeout start="true" time="100"/&gt; &lt;!-- timeout=100 --&gt; &lt;ssh start="false"/&gt; &lt;/rsync&gt; &lt;failLog path="/application/sersync/logs/rsync_fail_log.sh" timeToExecute="60"/&gt; &lt;!--default every 60mins execute once--&gt; &lt;crontab start="false" schedule="600"&gt; &lt;!--600mins--&gt; &lt;crontabfilter start="false"&gt; &lt;exclude expression="*.php"&gt;&lt;/exclude&gt; &lt;exclude expression="info/*"&gt;&lt;/exclude&gt; &lt;/crontabfilter&gt; &lt;/crontab&gt; &lt;plugin start="false" name="command"/&gt; &lt;/sersync&gt; &lt;plugin name="command"&gt; &lt;param prefix="/bin/sh" suffix="" ignoreError="true"/&gt; &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt; &lt;filter start="false"&gt; &lt;include expression="(.*)\.php"/&gt; &lt;include expression="(.*)\.sh"/&gt; &lt;/filter&gt; &lt;/plugin&gt; &lt;plugin name="socket"&gt; &lt;localpath watch="/opt/tongbu"&gt; &lt;deshost ip="192.168.138.20" port="8009"/&gt; &lt;/localpath&gt; &lt;/plugin&gt; &lt;plugin name="refreshCDN"&gt; &lt;localpath watch="/data0/htdocs/cms.xoyo.com/site/"&gt; &lt;cdninfo domainname="ccms.chinacache.com" port="80" username="xxxx" passwd="xxxx"/&gt; &lt;sendurl base="http://pic.xoyo.com/cms"/&gt; &lt;regexurl regex="false" match="cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"/&gt; &lt;/localpath&gt; &lt;/plugin&gt;&lt;/head&gt; 5， 启动sersync1234567891011121314151617181920212223242526272829[root@nfs01 /application]# /application/sersync/sersync2 -d -r -n 8 -o /application/sersync/conf/confxml.xmlset the system paramexecute：echo 50000000 &gt; /proc/sys/fs/inotify/max_user_watchesexecute：echo 327679 &gt; /proc/sys/fs/inotify/max_queued_eventsparse the command paramoption: -d run as a daemonoption: -r rsync all the local files to the remote servers before the sersync workoption: -n thread num is： 8option: -o config xml name： /application/sersync/conf/confxml.xmlparse xml config filehost ip : localhost host port: 8008daemon start，sersync run behind the console use rsync password-file :user is rsync_backuppasswordfile is /etc/rsync.passwordconfig xml parse successplease set /etc/rsyncd.conf max connections=0 Manuallysersync working thread 10 = 1(primary thread) + 1(fail retry thread) + 8(daemon sub threads) Max threads numbers is: 18 = 10(Thread pool nums) + 8(Sub threads)please according your cpu ，use -n param to adjust the cpu rate------------------------------------------rsync the directory recursivly to the remote servers onceworking please wait...execute command: cd /data &amp;&amp; rsync -az -R --delete ./ --timeout=100 rsync_backup@172.16.1.41::nfsbackup --password-file=/etc/rsync.password &gt;/dev/null 2&gt;&amp;1 run the sersync: watch path is: /data[root@nfs01 /application]#ps -ef|grep sersyncroot 2177 1 0 10:16 ? 00:00:00 /application/sersync/sersync2 -d -r -n 8 -o /application/sersync/conf/confxml.xmlroot 2191 1826 0 10:17 pts/0 00:00:00 grep --color=auto sersync2 6，添加到/etc/rc.local，开机自启动123456echo "#sersync 开机自启动" &gt;&gt;/etc/rc.local#echo "/application/sersync/sersync2 -d -r -n 8 -o /application/sersync/conf/confxml.xml" &gt;&gt;/etc/rc.localecho "/usr/bin/sersync -d -r -n 8 -o /application/sersync/conf/confxml.xml" &gt;&gt;/etc/rc.localtail /etc/rc.local]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sersync</tag>
        <tag>实时同步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19，全网备份项目]]></title>
    <url>%2F2019%2F07%2F21%2F19%EF%BC%8C%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[全网备份 某公司里有一台Web服务器，里面的数据很重要，但是如果硬盘坏了，数据就会丢失，现在领导要求你把数据在其他机器上做一个周期性定时备份。要求如下：每天晚上00点整在Web服务器A（web01）上打包备份网站程序目录并通过rsync命令推送到服务器B（backup）上备份保留（备份思路可以是先在本地按日期打包，然后再利用rsync推到备份服务器上）。具体要求如下：1）Web服务器A和备份服务器B的备份目录必须都为/backup。2）Web服务器站点目录假定为（/var/www/html）。3）Web服务器本地仅保留7天内的备份。4）备份服务器上每周六的数据都保留，其他备份仅保留180天备份。5）备份服务器上检查备份结果是否正常，并将每天的备份结果发给管理员信箱。12345678910要备份的主机：web01 172.16.1.8备份服务器（存放备份文件）：backup 172.16.1.41需要备份的目录：/var/spool/cron/root /etc/rc.local /etc/sysconfig/iptables /server/scripts /etc/sysctl.conf /etc/security/limits.conf /var/html/www /var/logs 1，安装rsync服务端和客户端1见17篇或者搜索rsync 2，客户端脚本1234567891011121314151617181920212223242526#/server/scripts/backup.sh文件内容#!/bin/baship=$(/sbin/ifconfig eth1 | awk -F'[ :]+' NR==2'&#123;print $4&#125;')backup_dir=/backupuser=rsync_backupbackup_server=172.16.1.41module=backuppassword_file=/etc/rsync.passwordif [ ! -e $&#123;backup_dir&#125;/$&#123;ip&#125; ]; then mkdir -p $&#123;backup_dir&#125;/$&#123;ip&#125;fiif [ $(date +%w) -eq 6 ]; then time=$($&#123;date&#125; +%F_%w)else time=$(date +%F)ficd / &amp;&amp; \ztar zchf $&#123;backup_dir&#125;/$&#123;ip&#125;/web_$&#123;time&#125;.tar.gz var/spool/cron/root etc/rc.local etc/sysconfig/iptables server/scripts etc/sysctl.conf etc/security/limits.conf var/html/www app/logs &amp;&amp; \md5sum $&#123;backup_dir&#125;/$ip/web_$&#123;time&#125;.tar.gz &gt; $&#123;backup_dir&#125;/$&#123;ip&#125;/flag_$(date +%F).log &amp;&amp; \rsync -az --password-file=$&#123;password_file&#125; $&#123;backup_dir&#125;/ $&#123;user&#125;@$&#123;backup_server&#125;::$&#123;module&#125;/find $&#123;backup_dir&#125; -type f -mtime +7 \( -name "*.tar.gz" -o -name "*.log"\) | xargs rm -f 3，写入定时任务10 0 * * * /bin/sh /server/scripts/backup.sh &gt;/dev/null 2&gt;&amp;1 4，备份服务器上检查脚本12345678910111213141516171819#/server/scripts/check_backup.sh#!/bin/bashIP=$(ifconfig eth1|awk -F "[:]+" 'NR==2&#123;print $4&#125;')Path=/backupif [ $(date +%w) -eq 6 ]then Time=$(date +%F_%w)else Time=$(date +%F)fifind /backup -type f -name "*$&#123;Time&#125;*.log" |xargs md5sum -c &gt;&gt; $&#123;Path&#125;/$&#123;Time&#125;_result.logsed -i -e '/: FAILED$/s#.*#&lt;span style="color:red;"&gt;\0&lt;/span&gt;#g' -e '/: OK$/s#.*#&lt;span style="color:green;"&gt;\0&lt;/span&gt;#g' $&#123;Path&#125;/$&#123;Time&#125;_result.logmail -s "$(echo -e "$&#123;Time&#125; backup result\nContent-type:text/html;charset=utf8")" jonah222@126.com &lt; $&#123;Path&#125;/$&#123;Time&#125;_result.logfind /backup/ -type f -mtime +7 -regextype 'posix-extended' ! -regex '.*_6.(tar.gz|log)' #| xargs rm -f#find /backup/ -type f -mtime +180 ! -name "*.*_6.*" #|xargs rm -f#find /backup/ -type f -mtime +7 -regextype 'posix-extended' ! -regex '.*_6.(tar.gz|log)' 5，备份服务器定时任务10 2 * * * /bin/sh /server/scripts/check_backup.sh &gt;/dev/null 2&gt;&amp;1]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18，网络文件系统--安装配置nfs]]></title>
    <url>%2F2019%2F07%2F20%2F18%EF%BC%8C%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F--%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEnfs%2F</url>
    <content type="text"><![CDATA[NFS服务端部署流程1，安装nfs和rpcbind1234yum install nfs-utils rpcbind -y[root@nfs01 ~]# rpm -qa nfs-utils rpcbind rpcbind-0.2.0-16.el6.x86_64nfs-utils-1.2.3-78.el6.x86_64 2，启动rpcbind和nfs服务123456789101112131415161718先启动rpcbind/etc/init.d/rpcbind start[root@nfs01 ~]# /etc/init.d/rpcbind startStarting rpcbind: [ OK ]查看rpc信息[root@nfs01 ~]# rpcinfo -p 10.0.0.31[root@nfs01 ~]# rpcinfo -p localhost [root@nfs01 ~]# rpcinfo -p program vers proto port service 100000 4 tcp 111 portmapper 100000 3 tcp 111 portmapper 100000 2 tcp 111 portmapper 100000 4 udp 111 portmapper 100000 3 udp 111 portmapper 100000 2 udp 111 portmapper再启动nfs/etc/init.d/nfs startrpcinfo -p 3，开机自启动12345678chkconfig nfs onchkconfig rpcbind ongrep '# chkconfig:' /etc/init.d/&#123;nfs,rpcbind&#125;/etc/init.d/nfs:# chkconfig: - 30 60/etc/init.d/rpcbind:# chkconfig: 2345 13 87[root@nfs01 ~]# chkconfig |egrep "nfs |rpcbind "nfs 0:off 1:off 2:on 3:on 4:on 5:on 6:offrpcbind 0:off 1:off 2:on 3:on 4:on 5:on 6:off 4，创建/data目录，更改所属用户和用户组12mkdir /data -pchown -R nfsnobody.nfsnobody /data/ 5，配置NFS服务,分享/data目录12345678vim /etc/exports#share /data 172.16.1.0/24/data 172.16.1.0/24(rw,sync)cat &gt;/etc/exports&lt;&lt;EOF#share /data 172.16.1.0/24/data 172.16.1.0/24(rw,sync)EOF 6，重启nfs服务12345#centos 6/etc/init.d/nfs reload#centos 7systemctl restart nfs 7，检查nfs是否配置正确1234rpcinfo -p 172.16.1.31showmount -e 172.16.1.31# Export list for 172.16.1.31:# /data 172.16.1.0/24 8，本地挂载测试12345mount -t nfs 172.16.1.31:/data /mnt/df -h测试完成之后，卸载目录umount /mnt/ NFS客户端配置流程1，安装nfs和rpcbind12yum install nfs-utils.x86_64 rpcbind.x86_64 -yrpm -qa nfs-utils rpcbind 2，开启rpcbind服务，设置成开机自启动，并检查1234567/etc/init.d/rpcbind startchkconfig rpcbind onchkconfig nfs offrpcinfo -pchkconfig | egrep 'nfs|rpcbind'ps -ef | egrep 'nfs|rpcbind' 3，创建目录并挂载12345# 检查服务端是否可用showmount -e 172.16.1.31mkdir /upload -pmount -t nfs 172.16.1.31:/data /upload 4，检查是否挂载成功1234567df -hcd /uploadtouch &#123;a..e&#125;.txt服务器端查看是否有文件ll /data/ 5，永久生效，开机自动挂载123456789方法一：（推荐）echo '/bin/mount -t nfs 172.16.1.31:/data /upload' &gt;&gt;/etc/rc.local方法二：2./etc/fstab如果把客户端挂载命令 放在/etc/fstab里面因为系统先读取/etc/fstab 自动挂载列表。然后启动network服务。需要让netfs服务开机自启动就可以继续使用fstab开机自动挂载nfs。 错误1）Starting NFS quotas: Cannot register service: RPC: Unable to receive; errno = Connection refused1234567891011/etc/init.d/nfs start[root@nfs01 ~]# service nfs startStarting NFS services: [ OK ]Starting NFS quotas: Cannot register service: RPC: Unable to receive; errno = Connection refusedrpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp). [FAILED]Starting NFS mountd: [FAILED]Starting NFS daemon: rpc.nfsd: writing fd to kernel failed: errno 111 (Connection refused)rpc.nfsd: unable to set any sockets for nfsd [FAILED]没有先开启rpcbind服务 2）配置文件没有配置好1234[root@nfs01 ~]# showmount -e 10.0.0.24Export list for 10.0.0.24:[root@nfs01 ~]#配置文件中，没有配置共享目录 3）exportfs: Failed to stat /data: No such file or directory123456[root@nfs01 ~]# /etc/init.d/nfs reloadexportfs: Failed to stat /data: No such file or directory没有创建/data目录mkdir /datachown nfsnobody.nfsnobody /data 4）mount.nfs: remote share not in ‘host:dir’ format12345[root@nfs01 ~]# mount -t nfs /data /mntmount.nfs: remote share not in 'host:dir' format[root@nfs01 ~]# mount -t nfs 10.0.0.24:/data /mnt本地挂载也要加上IP 5）touch: cannot touch `a.txt’: Permission denied12345678[root@nfs01 /mnt]# touch &#123;a..e&#125;.txttouch: cannot touch `a.txt': Permission deniedtouch: cannot touch `b.txt': Permission deniedtouch: cannot touch `c.txt': Permission deniedtouch: cannot touch `d.txt': Permission deniedtouch: cannot touch `e.txt': Permission denied/data 目录的所属用户和用户组不对chown nfsnobody.nfsnobody /data 6）exportfs: No host name given with /data (rw,sync), suggest *(rw,sync) to avoid warning123456789[root@nfs01 /]# /etc/init.d/nfs startStarting NFS services: exportfs: No options for /data 10.0.0.0/24: suggest 10.0.0.0/24(sync) to avoid warningexportfs: No host name given with /data (rw,sync), suggest *(rw,sync) to avoid warning [ OK ]Starting NFS quotas: [ OK ]Starting NFS mountd: [ OK ]Starting NFS daemon: [ OK ]Starting RPC idmapd: [ OK ]配置文件中（）前面和IP地址之间不能有空格 7）exportfs: /etc/exports:1: syntax error: bad option list1234567891011121314151617181920212223[root@nfs01 /]# /etc/init.d/nfs reload exportfs: /etc/exports:1: syntax error: bad option list/data 10.0.0.0/24(rw,sync)10.0.0.0/24(rw,sync)在)右小括号括过来之前，都不能有空格，右小括号之后有空格，reload不会报错左小括号左右、逗号左右，都不能有空格selinuxiptables共享目录没有授权网段写错了网络不通rpcbind,nfs顺序rpcbind服务重启后，不认识nfs了rpcbind 服务没有启动（portmap）[root@ nfs01~]#/etc/init.d/rpcbind stop[root@ nfs01~]# showmount-e 172.16.1.31.clnt_create: RPC: Port mapper failure-Unable to receive: errno 111 (Connection refused)[root@ nfs01~]# rpcinfo -p 172.16.1.31rpcinfo: can't contact portmapper: RPC: Remote system error-Connection refused.重启rpcbind服务导致的问题-RPC:Program not registered。 客户端错误1）mount.nfs: mount point /upload does not exist1234567[root@web01 ~]# mount -t nfs 10.0.0.24:/data /uploadmount.nfs: mount point /upload does not exist[root@web01 ~]# mkdir /upload[root@web01 ~]# mount -t nfs 10.0.0.24:/data /upload/upload目录不存在mkdir /upload 2）umount.nfs: /upload: device is busy1234567[root@web01 /upload]# umount /upload umount.nfs: /upload: device is busyumount.nfs: /upload: device is busy退出/upload目录，再卸载cd ..umount /upload 3）touch: cannot touch `1.txt’: Permission denied123456[root@web01 /upload]# touch 1.txttouch: cannot touch `1.txt': Permission denied服务器端/data目录所属用户和用户组不对在服务器上chown nfsnobody.nfsnobody /data 4）-bash: showmount: command not found1234[root@backup ~]# showmount -e 10.0.0.24-bash: showmount: command not found没有安装服务 5）mount: wrong fs type, bad option, bad superblock on 10.0.0.24:/data123456789[root@backup ~]# mount -t nfs 10.0.0.24:/data /mntmount: wrong fs type, bad option, bad superblock on 10.0.0.24:/data, missing codepage or helper program, or other error (for several filesystems (e.g. nfs, cifs) you might need a /sbin/mount.&lt;type&gt; helper program) In some cases useful info is found in syslog - try dmesg | tail or so没有安装NFS服务yum install nfs-utils –y 排错过程1234561、前提：NFS原理及部署过程2、先在客户端排查 1.ping server_ip 2.telnet server_ip 111 #端口是否通，是否提供服务 3.showmount-e server_ip #rpcinfo-p server_ip mount]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17，备份--安装配置rsync]]></title>
    <url>%2F2019%2F06%2F25%2F17%EF%BC%8C%E5%A4%87%E4%BB%BD--%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AErsync%2F</url>
    <content type="text"><![CDATA[服务端安装配置rsync查看rsync安装包1234567891011121314151617#我的安装系统的时候，就已经安装了rsync软件了，只需要配置就可以了rpm -qa rsync#安装#yum install rsync -y#源码安装：rpm -e --nodeps rsync #卸载系统自带的rsyncrpm -qa rsyncwget https://download.samba.org/pub/rsync/src/rsync-3.1.3.tar.gz#wget -O https://download.samba.org/pub/rsync/src/rsync-3.1.3.tar.gz ./rsync.tar.gztar xf rsync-3.1.3.tar.gzcd rsync-3.1.3#./configure --prefix=/apps/rsync/./configuremake &amp;&amp; make install 添加rsync服务的用户，管理本地目录的12useradd -s /sbin/nologin -M rsyncid rsync 生成rsyncd.conf配置文件12345678910111213141516171819##rsyncd.conf start##uid = rsync 用户，远端的命令使用rsync访问共享目录gid = rsync 用户组use chroot = no 安全选项max connections = 200 最大连接数timeout = 300 超时时间spid file = /var/run/rsyncd.pid rsync进程对应的进程号文件lock file = /var/run/rsync.lock rsync的程序锁文件log file = /var/log/rsyncd.log rsync的日志 出错[oldboy] 模块名称path = /oldboy 服务器提供访问的目录ignore errors 忽略错误read only = false 可读可写list = false 不允许列表hosts allow = 10.0.0.0/24 允许的主机范围hosts deny = 0.0.0.0/32 拒绝的主机范围auth users = rsync_backup 虚拟用户secrets file = /etc/rsync.password 用户对应的密码文件#rsync_config_______________end 123456789101112131415161718192021#rsync_config_______________start#created by jo 2017-11-27##rsyncd.conf start##uid = rsyncgid = rsyncuse chroot = nomax connections = 200timeout = 300pid file = /var/run/rsyncd.pidlock file = /var/run/rsync.locklog file = /var/log/rsyncd.log[backup]path = /backupignore errorsread only = falselist = falsehosts allow = 172.16.1.0/24hosts deny = 0.0.0.0/32auth users = rsync_backupsecrets file = /etc/rsync.password#rsync_config_______________end 12345678910111213141516171819202122232425262728#多模块配置cat &gt;/etc/rsyncd.conf&lt;&lt;EOF#rsync_config_______________start#created by jo 2018-07-27##rsyncd.conf start##uid = rsyncgid = rsyncuse chroot = nomax connections = 200timeout = 300pid file = /var/run/rsyncd.pidlock file = /var/run/rsync.locklog file = /var/log/rsyncd.log#提取到上面，让所有模块公用下面的配置ignore errorsread only = falselist = falsehosts allow = 172.16.1.0/24#hosts allow和 hosts deny只保留一条#hosts deny = 0.0.0.0/32auth users = rsync_backupsecrets file = /etc/rsync.password[backup]path = /backup[nfsbackup]path = /nfsbackup#rsync_config_______________endEOF 根据rsyncd.conf的auth users配置帐户，远程连接的。并根据secrets file 参数生成密码文件12echo "rsync_backup:123456" &gt;/etc/rsync.passwordcat /etc/rsync.password 为密码文件配置权限12chmod 600 /etc/rsync.passwordls -l /etc/rsync.password 创建共享的目录并授权rsync服务管理1234mkdir /backup -pchown -R rsync.rsync /backupls -ld /backup/#如果没有/backup目录，就会chdir failed 启动rsync服务并检查123456rsync --daemonps -ef | grep rsync |grep -v greplsof -i :873#或者用下面的命令，已知端口查看命令netstat -lntup|grep 873ss -lntup|grep 873 加入开机启动123chmod +x /etc/rc.d/rc.localecho "/usr/bin/rsync --daemon" &gt;&gt;/etc/rc.localtail -1 /etc/rc.local 排错1231，输出结果2，日志tail /var/log/rsyncd.log3，熟练部署过程（原理） rsync客户端生成连接服务器需要的密码文件12echo "123456" &gt;/etc/rsync.passwordcat /etc/rsync.password 为密码文件配置权限12chmod 600 /etc/rsync.passwordls -l /etc/rsync.password 同步文件123456789101112#推送rsync -avz /tmp/ rsync_backup@172.16.1.41::backup/ --password-file=/etc/rsync.passwordrsync -avz /tmp/ rsync://rsync_backup@172.16.1.41/backup/ --password-file=/etc/rsync.password#拉取：rsync -avz rsync_backup@172.16.1.41::backup /tmp/ --password-file=/etc/rsync.passwordrsync -avz rsync://rsync_backup@172.16.1.41/backup /tmp/ --password-file=/etc/rsync.password说明：注意/dir01/表示目录下的所有内容 /dir01表示的目录本身此例子是拷贝目录下的内容所以要加上/dir01/如果是要将/dir01整个目录拷贝到/dir02下，那么就要写/dir01 ---&gt;注意后面没有/1，目录后有/，复制目录下的内容2，目录后没有/，复制目录和目录下的内容]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>本地yum源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16，下载yum源的rpm，为本地搭建yum源做准备]]></title>
    <url>%2F2019%2F06%2F21%2F16%EF%BC%8C%E4%B8%8B%E8%BD%BDyum%E6%BA%90%E7%9A%84rpm%EF%BC%8C%E4%B8%BA%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BAyum%E6%BA%90%E5%81%9A%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[整体下载yum源的rpm整体下载阿里云的yum源阿里云的yum源下载速度很快，我一直都是用的阿里云的yum源。所有这里就用阿里云的yum源。除了阿里云的源，清华大学的源也不错。由于整理这篇博客的时候没有网络，所有就不贴网址了。 安装必要的软件包1yum install yum-utils createrepo -y 刷新yum源的缓存12yum clean allyum repolist 整体下载yum源1234mkdir /centos7cd /centos7reposync -n -r base#使用reposync下载时，会自动建立base目录 这里举例只用了一个base仓库，下载其它仓库也是一样的方法。 建立索引123cd /centos7/basecreaterepo .#由于包比较多，建立索引的时间会比较长，请耐心等待。 建立完索引之后就可以配置本地yum源了]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>本地yum源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[15，centos7配置本地yum源]]></title>
    <url>%2F2019%2F06%2F21%2F15%EF%BC%8Ccentos7%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0yum%E6%BA%90%2F</url>
    <content type="text"><![CDATA[centos7配置本地yum源安装nginx我下载好了一些依赖，打了一下zip包。由于现在没有网络，等有网络了，再上传到网上。两个文件：dependencies.zip nginx-1.16.0.tar.gz 这里安装nginx 1.16.0 版本，这也是之前下载的. 解压dependencies.zip文件，里面有个install.sh文件，执行它可以按顺序安装依赖包。安装完依赖包之后，安装nginx. 链接：https://pan.baidu.com/s/15OXfxuOek7uGxrFc1r6EMQ提取码：cz84 1234567891011121314151617181920useradd -s /sbin/nologin -u 1888 -M wwwtar xf nginx-1.16.0.tar.gzcd nginx-1.16.0./configure --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --prefix=/application/nginx-1.16.0/make &amp;&amp; make installln -s /application/nginx-1.16.0/ /application/nginxln -s /application/nginx/sbin/nginx /usr/bin/nginxecho '/application/nginx/sbin/nginx' &gt;&gt; /etc/rc.local#启动nginxnginx #检查，重新加载配置文件nginx -tnginx -s reload 配置nginx我用的vmware,共享主机上的文件夹。要先安装vmware-tools，然后才可以做文件夹共享。 1234567891011121314server &#123; listen 80; server_name 10.0.0.222; location / &#123; root /mnt/hgfs/centos7; index index.html index.htm; &#125; location = /50x.html &#123; root html; &#125;&#125; 改完了配置文件，记得执行 nginx -s reload ,重新加载nginx的配置文件 配置yum源 1,把/etc/yum.repo.d/目录下的所有的文件都移动到/tmp下 mv /etc/yum.repo.d/* /tmp/2,在/etc/yum.repo.d/目录下添加一个文件1.repo,内容如下：123456789101112131415[mybase]name=mybasebaseurl=http://10.0.0.222/basefailovermethod=priorityenabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7[myepel]name=myepelbaseurl=http://10.0.0.222/epelfailovermethod=priorityenabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7 刷新yum缓存12yum clean all # 清除缓存 yum repolist # 重新建立缓存 说明 本篇中需要注意的地方是，离线安装依赖包。因为我这前就把yum源里的安装包都下载了，并且也都建立了索引，所有就没有提及这一部分的内容。我将在下一篇中来说明，如何下载阿里云yum源rpm包,如何建立索引。由于yum源中文件太多，占用太大，我在这里就不提供了，请读者自行下载。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>本地yum源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[14，CentOS7优化]]></title>
    <url>%2F2019%2F06%2F21%2F14%EF%BC%8CCentOS7%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[CentOS7优化1，关闭selinux1234sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/configgrep SELINUX=disabled /etc/selinux/configsetenforce 0getenforce 2，关闭iptables1234567891011/etc/init.d/iptables stop/etc/init.d/iptables stopchkconfig iptables off#centos7systemctl stop firewalldsystemctl disable firewalld#克隆虚拟机后，可能会出现无法上网的情况，可执行下面的命令，重启后解决systemctl stop NetworkManagersystemctl disable NetworkManager 3，精简开机自启动服务12345678#centos 6chkconfig | egrep -v "crond|sshd|network|rsyslog|sysstat"|awk '&#123;print "chkconfig",$1,"off"&#125;'|bashexport LANG=enchkconfig --list | grep 3:on#centos 7ser=(abrt-ccpp.service abrt-oops.service abrt-vmcore.service abrt-xorg.service abrtd.service atd.service auditd.service chronyd.service kdump.service lvm2-monitor.service mdmonitor.service microcode.service lvm2-lvmetad.socket lvm2-lvmpolld.socket postfix.service NetworkManager.service);for i in $&#123;ser[@]&#125;;do systemctl stop $i; systemctl disable $i;done; 4，提权oldboy可以sudo1234567891011121314useradd oldboy\cp /etc/sudoers /etc/sudoers.oriecho "oldboy ALL=(ALL) NOPASSWD:ALL " &gt;&gt;/etc/sudoerstail -1 /etc/sudoersvisudo -c#================useradd totar_jonahecho 123456|passwd --stdin totar_jonah\cp /etc/sudoers /etc/sudoers.oriecho " totar_jonah ALL=(ALL) NOPASSWD:ALL " &gt;&gt;/etc/sudoerstail -1 /etc/sudoersvisudo -c 5，中文字符集1234567891011#centos 6cp /etc/sysconfig/i18n /etc/sysconfig/i18n.oriecho 'LANG="zh_CN.UTF-8"' &gt;/etc/sysconfig/i18nsource /etc/sysconfig/i18necho $LANG#centos7cp /etc/locale.conf&#123;,.bak&#125;echo 'LANG="zh_CN.UTF-8"' &gt;/etc/locale.confsource /etc/locale.confecho $LANG 6，时间同步123echo '#time sync by jo at 2019-04-16' &gt;&gt; /var/spool/cron/rootecho '*/5 * * * * /usr/sbin/ntpupdate ntp1.aliyun.com &gt;/dev/null 2&gt;&amp;1' &gt;&gt;/var/spool/cron/rootcrontab -l 7，命令行安全12345echo 'export TMOUT=300' &gt;&gt;/etc/profileecho 'export HISTSIZE=5' &gt;&gt;/etc/profileecho 'export HISTFILESIZE=5' &gt;&gt;/etc/profiletail -3 /etc/profile. /etc/profile 8，加大文件描述123echo '* - nofile 65535' &gt;&gt;/etc/security/limits.conftail -1 /etc/security/limits.conf 9，内核优化1234567891011121314151617181920212223cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOFnet.ipv4.tcp_fin_timeout = 2net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_syncookies = 1net.ipv4.tcp_keepalive_time = 600net.ipv4.ip_local_port_range = 4000 65000net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.route.gc_timeout = 100net.ipv4.tcp_syn_retries = 1net.ipv4.tcp_synack_retries = 1net.core.somaxconn = 16384net.core.netdev_max_backlog = 16384net.ipv4.tcp_max_orphans = 16384#以下参数是对iptables防火墙的优化，防火墙不开会提示，可以忽略不理。net.nf_conntrack_max = 25000000net.netfilter.nf_conntrack_max =25000000net.netfilter.nf_conntrack_tcp_timeout_established= 180net.netfilter.nf_conntrack_tcp_timeout_time_wait= 120net.netfilter.nf_conntrack_tcp_timeout_close_wait= 60net.netfilter.nf_conntrack_tcp_timeout_fin_wait= 120EOF 10，yum/repo 优化1234567mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bakcurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo#wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centsos-7.repomv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.bak#wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repocurl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 11，命令补全1yum install bash-completion wget tree htop lrzsz vim -y 12，终端提示符高亮并且显示全路径12345echo 'PS1="\e[1;32m\][\u@\h \w]\\$\[\e[m\] "' &gt;&gt; ~/.bashrc. ~/.bashrc#提示符使用全路径#sed -i -r 's#(.*PS1=\"\[\\u\@\\h \\)W(\]\\\\\$ \")#\1\w\2#g' /etc/bashrc 13，ssh端口修改，禁止root直接登陆123456789101112#sed -i 's@#UseDNS yes@UseDNS no@g;s@^GSSAPIAuthentication yes@GSSAPIAuthentication no@g' /etc/ssh/sshd_config# 禁止root远程登录sed -i 's@#PermitRootLogin yes@PermitRootLogin no@' /etc/ssh/sshd_config# 禁止空密码登录sed -i 's@#PermitEmptyPasswords no@PermitEmptyPasswords no@' /etc/ssh/sshd_configsystemctl restart sshd.service#禁止密码登陆#sed -i 's@# PasswordAuthentication yes@ PasswordAuthentication no@' /etc/ssh/sshd_configPermitRootLogin noPermitEmptyPasswords noPort 33122 14，普通用户使用ssh密钥登陆123456789101112sudo ssh-keygen -t rsa -C "jonah222@qq.com"mkdir .sshtouch .ssh/authorized_keyssudo cat /root/.ssh/id_rsa.pub &gt; ~/.ssh/authorized_keyschmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys#cat "PubkeyAuthentication yes" &gt;&gt;/etc/ssh/sshd_config#基于密钥认证的配置# vi /etc/ssh/sshd_config PasswordAuthentication no #禁止使用基于口令认证的方式登陆PubkeyAuthentication yes #允许使用基于密钥认证的方式登陆 小结：如何优化linux：1234567891011121314151617181、关闭SElinux2、关闭防火墙，设定运行级别为3.3、精简开机自启动服务4、SSH安全控制（提前建立普通用户）5、sudo 管理用户授权6、调整文件描述符7、更改合适的字符集8、锁定关键系统文件9、禁止显示内核版本及系统版本信息10、设置会话的超时时间及历史记录数11、禁止PING12、优化LINUX内核参数13、特定漏洞yum/rpm升级14、清楚多余的系统虚拟账号15、服务器时间同步16、打补丁下载软件调整为国内的下载地址（调整yum源）17、定时清理邮件服务临时目录垃圾文件18、为grub菜单加密码 总结：阿里云的坑 1，无法修改sshd的端口，在阿里的安全组中，sshd的端口只能是22。2，ssh的配置文件不要改错了，sshd_config才是sshd服务的配置文件，不是ssh_config]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>优化</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13，CentOS7安装]]></title>
    <url>%2F2019%2F06%2F19%2F13%EF%BC%8CCentOS7%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Centos 7 安装好久没有安装centos7 都有点忘记了。现在有点时间，所以就来回顾一下。我用的vmware虚拟机来安装的。所有，首先新建虚拟机。新建虚拟机的过程在这里就不再细说了，在这里只提一下，新建的时候要再添加一张网卡，一共有两张网卡，一张网卡是NAT模式，一张网卡使用LAN区段。 修改内核参数启动时修改内核参数选择安装界面中，按下TAB键，出现内核参数，在内核参数最后面，加个空格，再加上下面的参数。1net.ifnames=0 biosdevname=0 网卡配置1231，选择开机自动运行 2，ipv4配置 10.0.0.201 24 10.0.0.254 DNS：223.6.6.6 172.16.1.201 24 最小化安装，并选择软件包软件包选择最小化安装中的第 1 ，2，3个软件包，分别是：123Debugging ToolsCompatibility LibrariesDevelopment Tools 磁盘分区进入分区，选择“I will configure partitioning” 一般分区推荐123/boot 1Gswap 1G (内存的1-1.5倍，内存大于等于8G,就给8G)/ 8.5G (剩多少，给多少) 硬盘比较大1234/boot 1Gswap 1G/ 50-200G剩下的不分，留着以后用 数据库服务器分区1234/boot 1Gswap 1G/ 50-200G/data 剩下的都分给数据分区 kdump selinux这两个选项都disable]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12，docker的常用命令]]></title>
    <url>%2F2019%2F02%2F25%2F12%EF%BC%8Cdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[docker的常用命令 1、查看docker版本信息docker version查看客户端的信息，并通过socket查询服务端的信息。 2、查看docker信息docker info查看docker的汇总信息。3、查看镜像列表docker images4、查看所有的镜像包括过程镜像docker images -a 5、显示完整的镜像IDdocker images –no-trunc6、只显示镜像IDdocker images –no-trunc -q7、pull镜像docker pull centos:7.6.18108、pull所有标签的镜像docker pull centos9、查看运行中的容器docker ps10、列出所有有容器（包含停止的容器）docker ps -a11、显示容器大小docker ps -a -s12、仅列出最新创建的一个容器docker ps -l13、仅列出最新创建的n个容器docker ps n=214、仅列出容器IDdocker ps -q15、显示完整的容器IDdocker ps -q –no-trunc16、删除镜像docker rmi centos:7.6.181017、强制删除镜像docker rmi -f centos:7.6.1810也可以直接指定镜像ID进行删除。18、不移除该镜像的过程镜像，默认移除。docker rmi nginx:latest –no-prune19、删除容器docekr rm 154fe4e6a0c620、 强行移除该容器，即使其正在运行docker rm -f 154fe4e6a0c621、移除与容器关联的空间docker rm -v 154fe4e6a0c622、查看指定镜像的创建历史docker history centos:latest23、完整显示镜像历史docker history centos:latest –no-trunc24、启动、停止和重启一个或多个指定容器。（多个容器就空格添加多个容器ID即可）docker start 154fe4e6a0c6docker stop 154fe4e6a0c6docker restart 154fe4e6a0c625、启动之后并进入一个标准输入输出终端docker start -a 154fe4e6a0c626、交互式启动docker start -i 154fe4e6a0c627、停止的时候，超时就强制杀掉docker stop 154fe4e6a0c6 -t 2docker restart 154fe4e6a0c6 -t 228、从镜像启动容器docker run -itd centos:7.6.181029、暂停某一容器的所有进程docker pause 154fe4e6a0c630、恢复某一容器的所有进程docker unpause 154fe4e6a0c6 31、查看镜像的标准输出docker logs 154fe4e6a0c6 -f32、仅列出最新10条容器日志。docker logs 154fe4e6a0c6 –tail=”10”33、给镜像打上新的标签docker tag centos:7.6.1810 centos:76181034、杀死一个或多个指定容器进程docker kill 154fe4e6a0c635、将指定镜像保存成 tar 归档文件， docker load 的逆操作。docker save -o “centos.tar”或者docker save &gt; “centos.tar”36、从 tar 镜像归档中载入镜像， docker save 的逆操作。docker load -i centos.tar或者docker load &lt; centos.tar37、导出容器docker export 154fe4e6a0c6 -o export.tar或者docker export 154fe4e6a0c6 &gt; export.tar38、导入容器tar文件到镜像docker import -i export.tar或者docker import &lt; export.tar39、查看一个正在运行容器进程，支持 ps 命令参数。docker top 154fe4e6a0c6 -auxfww40、按步骤输入在 Docker Hub 注册的用户名、密码和邮箱即可完成登录docker login41、运行后从指定服务器登出，默认为官方服务器。docker logout42、启动设置容器主机名docker run -itd –hostname=centos7 centos:latest43、启动挂载本地目录到容器里面docker run -itd -v /data/centos7:/data centos:latest/data/centos7是物理目录，/data是容器里面的目录44、启动时指定dns，如果不指定是跟物理机是一致的docker run -itd –dns 8.8.8.8 centos:latest45、查找镜像站的镜像docker search centos]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11，克隆完成虚拟机，修改主机名和ip]]></title>
    <url>%2F2019%2F02%2F17%2F11%EF%BC%8C%E5%85%8B%E9%9A%86%E5%AE%8C%E6%88%90%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E5%92%8Cip%2F</url>
    <content type="text"><![CDATA[Centos 6123ip=77;name=ldapserver;sed -i '/IPADDR/s#200$#'"$ip"'#g' /etc/sysconfig/network-scripts/ifcfg-eth*sed -i 's#oldboy-muban#'"$name"'#g' /etc/sysconfig/network Centos 71234ip=111;name=docker;sed -i '/IPADDR/s#222$#'"$ip"'#g' /etc/sysconfig/network-scripts/ifcfg-eth*#sed -i 's#centos7-muban#'"$name"'#g' /etc/hostnamehostnamectl set-hostname $name]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10，word手动换行符替换为段落标记]]></title>
    <url>%2F2019%2F02%2F11%2F10%EF%BC%8Cword%E6%89%8B%E5%8A%A8%E6%8D%A2%E8%A1%8C%E7%AC%A6%E6%9B%BF%E6%8D%A2%E4%B8%BA%E6%AE%B5%E8%90%BD%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[word手动换行符替换为段落标记 word中的手动换行符是用shift+enter打出的，一个向下的箭头符号。搜索中用符号（^l）表示（line）。word中的段落标记是按回车（enter）打出来的.搜索中用符号（^p）表示（paragraph）。在替换的特殊格式中可以找到“手动换行符”和“段落标记”。]]></content>
      <categories>
        <category>word</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9，案例：网站迁移]]></title>
    <url>%2F2018%2F12%2F23%2F9%EF%BC%8C%E6%A1%88%E4%BE%8B%EF%BC%9A%E8%BF%81%E7%A7%BB%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[一次网站迁移故障及分析http://blog.51cto.com/lxshopping/1574929 迁移流程应该是:123456789101112131.暂停原服务器数据库，导出相关数据库2.将导出的数据库同步到杭州xx服务器上面并导入到数据库中3.对xx服务器进行压力测试及用户登录测试4.回滚方案，出现问题及时回滚到原服务器，保证用户正常访问5.切换域名指向到xx服务器6.原服务器上面做301跳转到xx服务器（保证不写入新数据到原运营服务器上面）7.运营协助测试新服务器数据是否正常]]></content>
      <categories>
        <category>案例</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>网站迁移</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8，kernel:nf_conntrack:table full,dropping packet.什么问题?如何解决?]]></title>
    <url>%2F2018%2F12%2F23%2F8%EF%BC%8C%E6%A1%88%E4%BE%8B%EF%BC%9A%20tables%20full%2F</url>
    <content type="text"><![CDATA[#企业案例 /var/log/messages 出现kernel:nf_conntrack:table full,dropping packet.什么问题?如何解决? ##解答: 12345678#上述结果会让业务访问很慢!#下面是针对iptables的优化net.nf_conntrack_max = 25000000net.netfilter.nf_conntrack_max = 25000000net.netfilter.nf_conntrack_tcp_timeout_established = 180net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120]]></content>
      <categories>
        <category>案例</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7，150+命令]]></title>
    <url>%2F2018%2F09%2F05%2F7%EF%BC%8C150%2B%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[命令 功能说明线上查询及帮助命令(2个)12man 查看命令帮助，命令的词典，更复杂的还有info，但不常用。help 查看Linux内置命令的帮助，比如cd命令。 文件和目录操作命令(18个)123456789101112131415161718ls 全拼list，功能是列出目录的内容及其内容属性信息。cd 全拼change directory，功能是从当前工作目录切换到指定的工作目录。cp 全拼copy，其功能为复制文件或目录。find 查找的意思，用于查找目录及目录下的文件。mkdir 全拼make directories，其功能是创建目录。mv 全拼move，其功能是移动或重命名文件。pwd 全拼print working directory，其功能是显示当前工作目录的绝对路径。rename 用于重命名文件。rm 全拼remove，其功能是删除一个或多个文件或目录。rmdir 全拼remove empty directories，功能是删除空目录。touch 创建新的空文件，改变已有文件的时间戳属性。tree 功能是以树形结构显示目录下的内容。basename 显示文件名或目录名。dirname 显示文件或目录路径。chattr 改变文件的扩展属性。lsattr 查看文件扩展属性。file 显示文件的类型。md5sum 计算和校验文件的MD5值。 查看文件及内容处理命令（21个）123456789101112131415161718192021cat 全拼concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。tac tac是cat的反向拼写，因此命令的功能为反向显示文件内容。more 分页显示文件内容。less 分页显示文件内容，more命令的相反用法。head 显示文件内容的头部。tail 显示文件内容的尾部。cut 将文件的每一行按指定分隔符分割并输出。split 分割文件为不同的小片段。paste 按行合并文件内容。sort 对文件的文本内容排序。uniq 去除重复行。oldboywc 统计文件的行数、单词数或字节数。iconv 转换文件的编码格式。dos2unix 将DOS格式文件转换成UNIX格式。diff 全拼difference，比较文件的差异，常用于文本文件。vimdiff 命令行可视化文件比较工具，常用于文本文件。rev 反向输出文件内容。grep/egrep 过滤字符串，三剑客老三。join 按两个文件的相同字段合并。tr 替换或删除字符。vi/vim 命令行文本编辑器。 文件压缩及解压缩命令（4个）1234tar 打包压缩。oldboyunzip 解压文件。gzip gzip压缩工具。zip 压缩工具 信息显示命令（11个）1234567891011uname 显示操作系统相关信息的命令。hostname 显示或者设置当前系统的主机名。dmesg 显示开机信息，用于诊断系统故障。uptime 显示系统运行时间及负载。stat 显示文件或文件系统的状态。du 计算磁盘空间使用情况。df 报告文件系统磁盘空间的使用情况。top 实时显示系统资源使用情况。free 查看系统内存。date 显示与设置系统时间。cal 查看日历等时间信息。 搜索文件命令（4个）1234which 查找二进制命令，按环境变量PATH路径查找。find 从磁盘遍历查找文件或目录。whereis 查找二进制命令，按环境变量PATH路径查找。locate 从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用updatedb更新库。 用户管理命令（10个）老男孩12345678910useradd 添加用户。usermod 修改系统已经存在的用户属性。userdel 删除用户。groupadd 添加用户组。passwd 修改用户密码。chage 修改用户密码有效期限。id 查看用户的uid,gid及归属的用户组。su 切换用户身份。visudo 编辑/etc/sudoers文件的专属命令。sudo 以另外一个用户身份（默认root用户）执行事先在sudoers文件允许的命令。 基础网络操作命令（11个）老男孩1234567891011telnet 使用TELNET协议远程登录。ssh 使用SSH加密协议远程登录。scp 全拼secure copy，用于不同主机之间复制文件。wget 命令行下载文件。ping 测试主机之间网络的连通性。route 显示和设置linux系统的路由表。ifconfig 查看、配置、启用或禁用网络接口的命令。ifup 启动网卡。ifdown 关闭网卡。netstat 查看网络状态。ss 查看网络状态。 深入网络操作命令（9个）123456789nmap 网络扫描命令。lsof 全名list open files，也就是列举系统中已经被打开的文件。mail 发送和接收邮件。mutt 邮件管理命令。nslookup 交互式查询互联网DNS服务器的命令。dig 查找DNS解析过程。host 查询DNS的命令。traceroute 追踪数据传输路由状况。tcpdump 命令行的抓包工具。 有关磁盘与文件系统的命令（16个）12345678910111213141516mount 挂载文件系统。umount 卸载文件系统。fsck 检查并修复Linux文件系统。dd 转换或复制文件。dumpe2fs 导出ext2/ext3/ext4文件系统信息。dump ext2/3/4文件系统备份工具。fdisk 磁盘分区命令，适用于2TB以下磁盘分区。parted 磁盘分区命令，没有磁盘大小限制，常用于2TB以下磁盘分区。mkfs 格式化创建Linux文件系统。partprobe 更新内核的硬盘分区表信息。e2fsck 检查ext2/ext3/ext4类型文件系统。mkswap 创建Linux交换分区。swapon 启用交换分区。swapoff 关闭交换分区。sync 将内存缓冲区内的数据写入磁盘。resize2fs 调整ext2/ext3/ext4文件系统大小。 系统权限及用户授权相关命令（4个）1234chmod 改变文件或目录权限。chown 改变文件或目录的属主和属组。chgrp 更改文件用户组。umask 显示或设置权限掩码。 查看系统用户登陆信息的命令（7个）1234567whoami 显示当前有效的用户名称，相当于执行id -un命令。who 显示目前登录系统的用户信息。w 显示已经登陆系统的用户列表，并显示用户正在执行的指令。last 显示登入系统的用户。lastlog 显示系统中所有用户最近一次登录信息。users 显示当前登录系统的所有用户的用户列表。finger 查找并显示用户信息。 内置命令及其它（19个）12345678910111213141516171819echo 打印变量，或直接输出指定的字符串printf 将结果格式化输出到标准输出。rpm 管理rpm包的命令。yum 自动化简单化地管理rpm包的命令。watch 周期性的执行给定的命令，并将命令的输出以全屏方式显示。alias 设置系统别名。unalias 取消系统别名。date 查看或设置系统时间。clear 清除屏幕，简称清屏。history 查看命令执行的历史纪录。eject 弹出光驱。time 计算命令执行时间。nc 功能强大的网络工具。xargs 将标准输入转换成命令行参数。exec 调用并执行指令的命令。export 设置或者显示环境变量。unset 删除变量或函数。type 用于判断另外一个命令是否是内置命令。bc 命令行科学计算器 系统管理与性能监视命令(9个)123456789chkconfig 管理Linux系统开机启动项。vmstat 虚拟内存统计。mpstat 显示各个可用CPU的状态统计。iostat 统计系统IO。sar 全面地获取系统的CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU中断和网络等性能数据。ipcs 用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。ipcrm 用来删除一个或更多的消息队列、信号量集或者共享内存标识。strace 用于诊断、调试Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。ltrace 命令会跟踪进程的库函数调用,它会显现出哪个库函数被调用。 关机/重启/注销和查看系统信息的命令（6个）1234567shutdown 关机。halt 关机。poweroff 关闭电源。logout 退出当前登录的Shell。exit 退出当前登录的Shell。Ctrl+d 退出当前登录的Shell的快捷键。reboot 重启 进程管理相关命令（15个）123456789101112131415bg 将一个在后台暂停的命令，变成继续执行 （在后台执行）。fg 将后台中的命令调至前台继续运行。jobs 查看当前有多少在后台运行的命令。kill 终止进程。killall 通过进程名终止进程。pkill 通过进程名终止进程。crontab 定时任务命令。ps 显示进程的快照。pstree 树形显示进程。nice/renice 调整程序运行的优先级。nohup 忽略挂起信号运行指定的命令。pgrep 查找匹配条件的进程。runlevel 查看系统当前运行级别。init 切换运行级别。service 启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[6，sed引用shell变量]]></title>
    <url>%2F2018%2F09%2F04%2F6%EF%BC%8Csed%E5%BC%95%E7%94%A8shell%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[下面是可以使用的几种方法1234567# 推荐使用这种方法sed -i 's#centos#'"$name"'#g' test.txteval sed 's/$a/$b/' filenamesed "s/$a/$b/" filenamesed 's/'$a'/'$b'/' filenamesed s/$a/$b/ filename 测试123456789101112[root@centos691 /server/scripts]# cat test.txtcentos[root@centos691 /server/scripts]# name=oldboy;sed -n 's#centos#'"$name"'#gp' test.txtoldboy[root@centos691 /server/scripts]# name=oldboy;sed -n 's#centos#'$name'#gp' test.txtoldboy[root@centos691 /server/scripts]# name=oldboy;sed -n "s#centos#$name#gp" test.txtoldboy[root@centos691 /server/scripts]# name=oldboy;sed -n s#centos#$name#gp test.txtoldboy[root@centos691 /server/scripts]# name=oldboy;eval sed -n 's#centos#$name#gp' test.txtoldboy 实例1234# 克隆完成之后，修改IP和主机名ip=51;name=db01;sed -i '/IPADDR/s#210$#'"$ip"'#g' /etc/sysconfig/network-scripts/ifcfg-eth*;sed -i 's#oldboyedu-muban#'"$name"'#g' /etc/sysconfig/network;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5，LNMP系列（三）之php源码安装]]></title>
    <url>%2F2018%2F09%2F03%2F5%EF%BC%8CLNMP%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8Bphp%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[LNMP系列（三）之php源码安装php源码安装 解压PHP软件，进行编译安装，将程序安装到/application目录中，并且创建软链接 123yum install zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel curl-devel -yyum install freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libxslt-devel -yrpm -qa zlib-devel libxml2-devel libjpeg-devel libjpeg-turbo-devel curl-devel freetype-devel libpng-devel gd-devel libcurl-devel libxslt-devel libxslt-devel 安装其它相关程序—libmcrypt123456#wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repoyum -y install libmcrypt-devel mhash mcryptrpm -qa libmcrypt-devel mhash mcrypt http://php.net/releases/ 安装PHP软件程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#下载安装包并解压cd ~/tools/wget http://cn2.php.net/distributions/php-5.6.36.tar.gztar xf php-5.6.36.tar.gzcd php-5.6.36 #----正式编译前也可以把这个软件安装上（libxslt*）./configure --prefix=/apps/php-5.6.36 \--with-mysql=mysqlnd \--with-pdo-mysql=mysqlnd \--with-freetype-dir \--with-jpeg-dir \--with-png-dir \--with-zlib \--with-libxml-dir=/usr \--enable-xml \--disable-rpath \--enable-bcmath \--enable-shmop \--enable-sysvsem \--enable-inline-optimization \--with-curl \--enable-mbregex \--enable-fpm \--enable-mbstring \--with-mcrypt \--with-gd \--enable-gd-native-ttf \--with-openssl \--with-mhash \--enable-pcntl \--enable-sockets \--with-xmlrpc \--enable-soap \--enable-short-tags \--enable-static \--with-xsl \--with-fpm-user=www \--with-fpm-group=www \--enable-ftp \--enable-opcache=no##提示 如下内容 即成功Generating filesconfigure: creating ./config.statuscreating main/internal_functions.ccreating main/internal_functions_cli.c+--------------------------------------------------------------------+| License: || This software is subject to the PHP License, available in this || distribution in the file LICENSE. By continuing this installation || process, you are bound by the terms of this license agreement. || If you do not agree with the terms of this license, you must abort || the installation process at this point. |+--------------------------------------------------------------------+Thank you for using PHP.config.status: creating php5.specconfig.status: creating main/build-defs.hconfig.status: creating scripts/phpizeconfig.status: creating scripts/man1/phpize.1config.status: creating scripts/php-configconfig.status: creating scripts/man1/php-config.1config.status: creating sapi/cli/php.1config.status: creating sapi/fpm/php-fpm.confconfig.status: creating sapi/fpm/init.d.php-fpmconfig.status: creating sapi/fpm/php-fpm.serviceconfig.status: creating sapi/fpm/php-fpm.8config.status: creating sapi/fpm/status.htmlconfig.status: creating sapi/cgi/php-cgi.1config.status: creating ext/phar/phar.1config.status: creating ext/phar/phar.phar.1config.status: creating main/php_config.hconfig.status: executing default commands 12345678910111213141516ln -s /apps/mysql/lib/libmysqlclient.so.18 /usr/lib64/ #可以不创建 touch ext/phar/phar.phar #这个文件一定要创建make &amp;&amp; make installln -s /apps/php-5.6.36/ /apps/phpGenerating phar.phpGenerating phar.pharPEAR package PHP_Archive not installed: generated phar will require PHP's phar extension be enabled.clicommand.incpharcommand.incinvertedregexiterator.incdirectorygraphiterator.incdirectorytreeiterator.incphar.incBuild complete. 123456789101112131415161718192021222324252627282930[root@web01 php-5.6.36]# make install Installing PHP CLI binary: /apps/php-5.6.36/bin/Installing PHP CLI man page: /apps/php-5.6.36/php/man/man1/Installing PHP FPM binary: /apps/php-5.6.36/sbin/Installing PHP FPM config: /apps/php-5.6.36/etc/Installing PHP FPM man page: /apps/php-5.6.36/php/man/man8/Installing PHP FPM status page: /apps/php-5.6.36/php/php/fpm/Installing PHP CGI binary: /apps/php-5.6.36/bin/Installing PHP CGI man page: /apps/php-5.6.36/php/man/man1/Installing build environment: /apps/php-5.6.36/lib/php/build/Installing header files: /apps/php-5.6.36/include/php/Installing helper programs: /apps/php-5.6.36/bin/ program: phpize program: php-configInstalling man pages: /apps/php-5.6.36/php/man/man1/ page: phpize.1 page: php-config.1Installing PEAR environment: /apps/php-5.6.36/lib/php/[PEAR] Archive_Tar - installed: 1.4.0[PEAR] Console_Getopt - installed: 1.4.1[PEAR] Structures_Graph- installed: 1.1.1[PEAR] XML_Util - installed: 1.3.0[PEAR] PEAR - installed: 1.10.1Wrote PEAR system config file at: /apps/php-5.6.36/etc/pear.confYou may want to add: /apps/php-5.6.36/lib/php to your php.ini include_path/root/tools/php-5.6.36/build/shtool install -c ext/phar/phar.phar /apps/php-5.6.36/binln -s -f phar.phar /apps/php-5.6.36/bin/pharInstalling PDO headers: /apps/php-5.6.36/include/php/ext/pdo/[root@web01 php-5.6.36]# echo $?0 复制php.ini配置文件1[root@web01 php-5.6.36]# cp /root/tools/php-5.6.36/php.ini-production /apps/php-5.6.36/lib/php.ini 复制php-fpm配置文件1234567891011121314151617[root@web01 php-5.6.36]# cd /apps/php-5.6.36/etc/[root@web01 etc]# ls pear.conf php-fpm.conf.default[root@web01 etc]# cp php-fpm.conf.default php-fpm.conf[root@web01 etc]# lltotal 52-rw-r--r-- 1 root root 1332 Feb 27 22:53 pear.conf-rw-r--r-- 1 root root 22609 Feb 27 22:56 php-fpm.conf-rw-r--r-- 1 root root 22609 Feb 27 22:53 php-fpm.conf.default[root@web01 etc]# /apps/php-5.6.36/sbin/php-fpm -t[27-Feb-2018 22:56:53] NOTICE: configuration file /apps/php-5.6.36/etc/php-fpm.conf test is successful[root@web01 etc]# /apps/php-5.6.36/sbin/php-fpm [root@web01 etc]# ss -lntup |grep 9000tcp LISTEN 0 16384 127.0.0.1:9000 *:* users:(("php-fpm",129733,7),("php-fpm",129734,0),("php-fpm",129735,0)) LNMP搭建网站前的测试。 测试nginx与php配合是否成功php与MySQL配合是否成功部署网站 测试nginx与php配合是否成功1234567891011121314server &#123; listen 80; server_name blog.etiantian.org; root html/blog; index index.php index.html index.htm; location ~ .*\.(php|php5)?$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; &#125;&#125;echo '&lt;?php phpinfo();?&gt;' &gt;/apps/nginx/html/blog/test_info.php php与MySQL配合是否成功1234567891011test_mysql.php&lt;?php //$link_id=mysql_connect('主机名','用户','密码'); $link_id=mysql_connect('172.16.1.51','wordpress','123456') or mysql_error(); if($link_id)&#123; echo "mysql successful by oldboy ! \n"; &#125;else&#123; echo mysql_error(); &#125;?&gt;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4，LNMP系列（二）之MySQL]]></title>
    <url>%2F2018%2F09%2F03%2F4%EF%BC%8CLNMP%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BMySQL%2F</url>
    <content type="text"><![CDATA[LNMP系列（二）之MySQL安装–二进制安装二进制安装MySQL-5.6.400.准备工作-下载mysql12345https://downloads.mysql.com/archives/community/mkdir /root/tools -pcd /root/toolswget https://downloads.mysql.com/archives/get/file/mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz 1.添加用户1useradd -s /sbin/nologin -M mysql 2.解压 mysql 二进制包12cd /root/toolstar xf mysql-5.6.40-*-x86_64.tar.gz 3.把MySQL 移动到 /apps/12mkdir -p /apps/mv /root/tools/mysql-5.6.40-*-x86_64 /apps/mysql-5.6.40 4.创建软连接1ln -s /apps/mysql-5.6.40/ /apps/mysql 5.让MySQL用户管理 /apps/mysql1chown -R mysql.mysql /apps/mysql/data 6.安装这个软件 初始化数据库 #1.软件安装在哪里 #2.数据存放在哪里 #3.MySQL使用的用户谁？ 1/apps/mysql/scripts/mysql_install_db --basedir=/apps/mysql --datadir=/apps/mysql/data --user=mysql 12345678910#####To start mysqld at boot time you have to copy#####support-files/mysql.server to the right place for your system#####mysql启动脚本 默认放在support-files/mysql.server##########记得给MySQL设置个密码#####PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !#####To do so, start the server, then issue the following commands:########## /apps/mysql/bin/mysqladmin -u root password &apos;new-password&apos;##### /apps/mysql/bin/mysqladmin -u root -h web01 password &apos;new-password&apos; 7.复制启动脚本 授权12cp /apps/mysql/support-files/mysql.server /etc/init.d/mysqldchmod +x /etc/init.d/mysqld 8.修改启动脚本 和 mysql命令 中的路径1sed -i &apos;s#/usr/local/mysql#/apps/mysql#g&apos; /apps/mysql/bin/mysqld_safe /etc/init.d/mysqld 9.复制 默认的配置文件12\cp /apps/mysql/support-files/my-default.cnf /etc/my.cnf/etc/init.d/mysqld start 1234567891011121314151617181920###故障##1./tmp权限##2.主机名解析 hosts解析 #ping 主机名##3.一步一步执行####/apps/mysql/bin/mysql##Welcome to the MySQL monitor. Commands end with ; or \g.##Your MySQL connection id is 1##Server version: 5.5.49 MySQL Community Server (GPL)####Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.####Oracle is a registered trademark of Oracle Corporation and/or its##affiliates. Other names may be trademarks of their respective##owners.####Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.####mysql&gt; 10.PATH路径123echo &apos;export PATH=/apps/mysql/bin:$PATH&apos; &gt;&gt;/etc/profilesource /etc/profilewhich mysql 11.加入开机自启动12chkconfig --add mysqldchkconfig mysqld on 12.给MySQL root用户设置密码1/apps/mysql/bin/mysqladmin -u root password &apos;oldboy123&apos; 13.重新登录MySQL数据库1mysql -uroot -poldboy123 14.数据库基础框架 #1.数据库 test mysql #2.表格 12345#mysql SQL语句#查看系统中所有数据库#show databases;#查看系统中所有的用户#使用某一个数据库 1234567891011mysql&gt; #查看当前都有啥mysql&gt; show databases; //********+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.07 sec) 初级 查看系列-开始123##使用某一个数据库###相当于进入 mysql 数据库中 cd mysql ; cd test#use mysql 12345678##我想查看当前在哪？ pwd 当前正在使用哪个数据库select database();+------------+| database() |+------------+| mysql |+------------+1 row in set (0.00 sec) 12345678##我是谁？ 查看当前用户select user();+----------------+| user() |+----------------+| root@localhost |+----------------+1 row in set (0.00 sec) 12345678910111213141516###当前系统都有什么用户？ 他们可以在哪里登录？ *****select user,host from mysql.user;+------+-----------+| user | host |+------+-----------+| root | 127.0.0.1 || root | ::1 || | localhost || root | localhost || | web01 || root | web01 |+------+-----------+6 rows in set (0.02 sec)####初级 查看系列-结束###show databases;###select user,host from mysql.user; 初级 添加删除系列12345678910111213141516171819202122#创建数据库create database wordpress;#删除数据库drop database wordpress;#添加用户grant all on wordpress.* to &apos;wordpress&apos;@&apos;172.16.1.0/255.255.255.0&apos; identified by &apos;123456&apos;;grant all on wordpress.* to &apos;wordpress&apos;@&apos;172.16.1.0/255.255.255.0&apos; identified by &apos;123456&apos;;授权所有的权限, wordpress数据库所有的权限 给 wordpress用户 可以在172.16.1.0/255.255.255.0 网段登录数据库 这个用户的密码123456；#更新系统的权限表flush privileges;###进行测试mysql -uwordpress -p123456mysql -uwordpress -p -h 172.16.1.8#删除用户drop user wordpress@&apos;172.16.1.8&apos;; ###1.查看都有什么数据库 ###2.查看都有什么用户 ###3.添加用户 help sql语句。123456789#跳过授权表（不用密码登录）#/etc/init.d/mysqld restart --skip-grant-table#mysql 命令行#-u 指定用户#-p 指定密码（不要有空格）#-h 连接到某一台服务器#更改密码 mysqladmin -uroot -poldboy123 password &apos;新的密码&apos;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[3，LNMP系列（一）nginx源码安装]]></title>
    <url>%2F2018%2F08%2F24%2F3%EF%BC%8CLNMP%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89nginx%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[LNMP系列（一）nginx源码安装下载安装过程123456789101112131415161718192021222324cd /root/mkdir toolscd tools/yum install openssl openssl-devel -yyum install pcre pcre-devel -y#useradd www -s /sbin/nologin -M#在阿里云服务器上，只有把用户名写在最后，才可以成功创建用户 useradd -s /sbin/nologin -u 1888 -M wwwwget -q http://nginx.org/download/nginx-1.14.0.tar.gztar xf nginx-1.14.0.tar.gzcd nginx-1.14.0./configure --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --prefix=/apps/nginx-1.14.0/makemake installln -s /apps/nginx-1.14.0/ /apps/nginxln -s /apps/nginx/sbin/nginx /usr/bin/nginxecho '/application/nginx/sbin/nginx' &gt;&gt; /etc/rc.local 检查 重启123/apps/nginx/sbin/nginx -t/apps/nginx/sbin/nginx -s reload 配置文件123456789101112131415161718192021222324worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server &#123; listen 80; server_name 10.0.0.61; # 域名 location / &#123; root /mnt/hgfs/rpm; # 网站根目录 index index.html index.htm; autoindex on; # 目录列表 autoindex_exact_size off; autoindex_localtime on; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; yum安装nginx123456789cat &gt; /etc/yum.repos.d/nginx.repo&lt;&lt;EOF[nginx]name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/gpgcheck=0enabled=1EOFyum install nginx -y]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2，hexo改换主题]]></title>
    <url>%2F2018%2F08%2F24%2F2%EF%BC%8Chexo-theme%2F</url>
    <content type="text"><![CDATA[hexo 更换主题自己在github上搭建了一个博客，主题不喜欢，所以就换一个，个人比较喜欢的有两个，一个是light，另了个是next。 安装主题安装都很简单，进入你hexo的根目录，直接git就可以了。每个主题都有给出安装方法，很简单。12345#light git clone https://github.com/hexojs/hexo-theme-light.git themes/light#next git clone https://github.com/theme-next/hexo-theme-next themes/next 使用主题使用也很简单，到_config.yml配置文件中，修改theme选项 1theme: next]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>theme</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1，Hello World]]></title>
    <url>%2F2018%2F08%2F23%2F1%EF%BC%8Chello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
